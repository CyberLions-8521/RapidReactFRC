// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands;
import org.photonvision.PhotonCamera;

import frc.robot.Constants.DriveConstants;
import frc.robot.subsystems.Drivebase;
import frc.robot.subsystems.ExampleSubsystem;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.PhotonVision;
/** An example command that uses an example subsystem. */
public class PhotonGotoBall extends CommandBase {
  @SuppressWarnings({"PMD.UnusedPrivateField", "PMD.SingularField"})
  private final PhotonVision m_KevinVision;
  private final Drivebase m_drivebase;
  boolean m_targetFound;
  boolean m_targetReached;
  double m_steeringAdjust;
  /**
   * Creates a new ExampleCommand.
   *
   * @param subsystem The subsystem used by this command.
   */
  public PhotonGotoBall(PhotonVision photon,Drivebase db) {
    m_KevinVision =photon;
    m_drivebase =db;




    addRequirements(db);
    addRequirements(photon);
  }

  public void searchForTarget() {
    // Check if the target is in the view
    m_targetFound = m_KevinVision.getHasTarget();
    // Get the offset from the center of the camera and the target
    double offset = -m_KevinVision.getYaw();
    m_steeringAdjust = 0.0;
    // If we do not see the target, adjust the steering
    if (!m_targetFound) {
        m_steeringAdjust = 0.1;
    }
    // We DO see the target
    else {
        m_steeringAdjust = Math.min(Math.abs(DriveConstants.STEER_K * offset), 0.1);
    }}
  @Override
  public void initialize() {}

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
searchForTarget();

  }



  //Ignore the bottom USELSS
  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {}

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }
}
